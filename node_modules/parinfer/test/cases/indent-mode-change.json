[{"out":
  {"fileLineNo":19,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":5,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "      result)", " ",
    " (defn frac [a b]", "   (let [result (\/ a b)]",
    "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":5,
    "end-line-no":5,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn prod [a b]", "   (let [result (* a b)]",
     "      result)", " ", " (defn frac [a b]",
     "   (let [result (\/ a b)]", "      result))"],
    "new-lines":["   (let [result (* a b)]"]}}},
 {"out":
  {"fileLineNo":49,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":35,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " ", " (defn frac [a b]", "   (let [result (\/ a b)]",
    "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":4,
    "end-line-no":4,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn prod [a b]", "   (let [result (* a b)]",
     "      result))", " ", " (defn frac [a b]",
     "   (let [result (\/ a b)]", "      result))"],
    "new-lines":
    [" (defn prod [a b]", "   (let [result (* a b)]",
     "      result))"]}}},
 {"out":
  {"fileLineNo":80,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn product [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":65,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":4,
    "end-line-no":5,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn product [a b]", "   (let [result (* a b)]",
     "      result))", " ", " (defn frac [a b]",
     "   (let [result (\/ a b)]", "      result))"],
    "new-lines":[" (defn product [a b]"]}}},
 {"out":
  {"fileLineNo":113,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      {:prod result", "       :a a", "       :b b}))", " ",
    " (defn frac [a b]", "   (let [result (\/ a b)]",
    "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":96,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":6,
    "end-line-no":7,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn prod [a b]", "   (let [result (* a b)]",
     "      {:prod result", "       :a a", "       :b b}))", " ",
     " (defn frac [a b]", "   (let [result (\/ a b)]",
     "      result))"],
    "new-lines":
    ["      {:prod result", "       :a a", "       :b b}))"]}}},
 {"out":
  {"fileLineNo":146,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (* a b))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":131,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":5,
    "end-line-no":7,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn prod [a b]", "   (* a b))", " ", " (defn frac [a b]",
     "   (let [result (\/ a b)]", "      result))"],
    "new-lines":["   (* a b))"]}}},
 {"out":
  {"fileLineNo":176,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)])",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":161,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
    " ", " (defn prod [a b]", "   (let [result (* a b)]",
    "      result))", " ", " ", " (defn frac [a b]",
    "   (let [result (\/ a b)]", "      result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":6,
    "end-line-no":10,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "      result))",
     " ", " (defn prod [a b]", "   (let [result (* a b)]",
     "   (let [result (\/ a b)]", "      result))"],
    "new-lines":[]}}},
 {"out":
  {"fileLineNo":199,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result)", "",
    " ; some comment", "", "   foo)"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":189,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
    "", " ; some comment", ""],
   "cursor":null,
   "diff":
   {"start-line-no":6,
    "end-line-no":6,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
     "", " ; some comment", "", "   foo"],
    "new-lines":["   foo"]}}},
 {"out":
  {"fileLineNo":223,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
    "", " ; some comment", "", " ", " ", " "],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":211,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
    "", " ; some comment", ""],
   "cursor":null,
   "diff":
   {"start-line-no":6,
    "end-line-no":6,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
     "", " ; some comment", "", " ", " ", " "],
    "new-lines":[" ", " ", " "]}}},
 {"out":
  {"fileLineNo":248,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result)", "",
    "  {:foo", "   (let [result (* a b)]", "     result)})"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":237,
   "lines":
   [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
    "", " (defn prod [a b]", "   (let [result (* a b)]",
    "     result))"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":4,
    "end-line-no":5,
    "lines":
    [" (defn sum [a b]", "   (let [result (+ a b)]", "     result))",
     "", "  {:foo", "   (let [result (* a b)]", "     result))"],
    "new-lines":["  {:foo"]}}},
 {"out":
  {"fileLineNo":265,
   "lines":
   [" (defn foo [a b]", "   ; \"my docstring", "   ; is now closed\"",
    "   bar)"],
   "cursor":null,
   "diff":null},
  "in":
  {"fileLineNo":258,
   "lines":[" (defn foo [a b]", "   ; \"my docstring", "   bar"],
   "cursor":null,
   "diff":
   {"closed?":true,
    "start-line-no":2,
    "end-line-no":2,
    "lines":
    [" (defn foo [a b]", "   ; \"my docstring", "   ; is now closed\"",
     "   bar"],
    "new-lines":["   ; is now closed\""]}}}]
